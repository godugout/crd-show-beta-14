
import type { CardData } from '@/types/card';

export interface CardValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

export class CardValidationService {
  static validateCard(card: CardData): CardValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    console.log(`üîç Validating card: ${card.title || 'Untitled'} (${card.id})`);

    // Required fields validation
    if (!card.title?.trim()) {
      errors.push('Card title is required and cannot be empty');
    }
    
    if (!card.id) {
      warnings.push('Card ID is missing, will be generated by database');
    }

    // Validate rarity with detailed mapping info
    const validRarities = ['common', 'uncommon', 'rare', 'epic', 'legendary'];
    if (card.rarity && !validRarities.includes(card.rarity)) {
      console.warn(`‚ö†Ô∏è Invalid rarity "${card.rarity}" for card "${card.title}"`);
      warnings.push(`Invalid rarity "${card.rarity}", will be mapped to common`);
    }

    // Validate visibility
    const validVisibilities = ['public', 'private', 'shared'];
    if (card.visibility && !validVisibilities.includes(card.visibility)) {
      warnings.push(`Invalid visibility "${card.visibility}", will be set to private`);
    }

    // Validate arrays and objects
    if (card.tags && !Array.isArray(card.tags)) {
      errors.push('Tags must be an array');
    }

    if (card.design_metadata && typeof card.design_metadata !== 'object') {
      warnings.push('design_metadata should be an object, will be reset to empty object');
    }

    // Check for common problematic fields
    if (card.publishing_options && typeof card.publishing_options !== 'object') {
      warnings.push('publishing_options should be an object, will be reset to defaults');
    }

    console.log(`‚úÖ Validation complete for "${card.title}": ${errors.length} errors, ${warnings.length} warnings`);

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
}
