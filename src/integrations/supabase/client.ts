// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Environment-based configuration with security validation
const getSupabaseConfig = () => {
  const url = import.meta.env.VITE_SUPABASE_URL;
  const key = import.meta.env.VITE_SUPABASE_ANON_KEY;
  
  if (!url || !key) {
    console.error('‚ùå Missing Supabase configuration');
    console.error('Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your .env.local file');
    throw new Error('Missing Supabase configuration. Check your environment variables.');
  }
  
  // Validate URL format
  if (!url.startsWith('https://') || !url.includes('.supabase.co')) {
    throw new Error('Invalid Supabase URL format');
  }
  
  // Validate key format (basic check)
  if (!key.startsWith('eyJ')) {
    throw new Error('Invalid Supabase API key format');
  }
  
  return { url, key };
};

const config = getSupabaseConfig();

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(config.url, config.key, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Export the config for debugging (without sensitive data)
export const supabaseConfig = {
  url: config.url,
  hasKey: !!config.key,
  isConfigured: true
};Imt3eHNua2NreWprbXBkenJzeXhpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk1OTQ3NDQsImV4cCI6MjA2NTE3MDc0NH0.s4nuV8CnLnHhfTFUlMQVg5XFV4VluJtJaxAyc3hWBPU"
    };
  }
};

const config = getSupabaseConfig();

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(config.url, config.key, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Export the config for debugging (without sensitive data)
export const supabaseConfig = {
  url: config.url,
  hasKey: !!config.key,
  isConfigured: true
};