import React, { useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { CRDButton } from '@/components/ui/design-system/Button';
import { Badge } from '@/components/ui/badge';
import { 
  Play, 
  Download, 
  Eye, 
  Layers,
  Wand2,
  ArrowRight,
  Sparkles
} from 'lucide-react';
import { PSDLayer, GeneratedFrame } from '../import/CRDPSDProcessor';
import { PSDCanvasRenderer } from './PSDCanvasRenderer';
import { PSDLayerPanel } from './PSDLayerPanel';
import { toast } from 'sonner';

interface PSDIntegratedPreviewProps {
  layers: PSDLayer[];
  generatedFrames: GeneratedFrame[];
  onApplyToCanvas: (layers: PSDLayer[], visibleLayers: Set<string>) => void;
  onGenerateCard: (frameData: any) => void;
  onUseFrame: (frameData: any) => void;
}

export const PSDIntegratedPreview: React.FC<PSDIntegratedPreviewProps> = ({
  layers,
  generatedFrames,
  onApplyToCanvas,
  onGenerateCard,
  onUseFrame
}) => {
  const [visibleLayers, setVisibleLayers] = useState<Set<string>>(
    new Set(layers.filter(l => l.visible).map(l => l.id))
  );
  const [selectedLayer, setSelectedLayer] = useState<string | null>(null);
  const [layerOpacity, setLayerOpacity] = useState<Map<string, number>>(
    new Map(layers.map(l => [l.id, l.styleProperties?.opacity || 1]))
  );
  const [selectedFrame, setSelectedFrame] = useState<GeneratedFrame | null>(
    generatedFrames[0] || null
  );

  const handleLayerVisibilityToggle = useCallback((layerId: string) => {
    const newVisible = new Set(visibleLayers);
    if (newVisible.has(layerId)) {
      newVisible.delete(layerId);
    } else {
      newVisible.add(layerId);
    }
    setVisibleLayers(newVisible);
  }, [visibleLayers]);

  const handleLayerOpacityChange = useCallback((layerId: string, opacity: number) => {
    const newOpacity = new Map(layerOpacity);
    newOpacity.set(layerId, opacity);
    setLayerOpacity(newOpacity);
  }, [layerOpacity]);

  const handleApplyToCanvas = useCallback(() => {
    // Update layer opacity values before applying
    const updatedLayers = layers.map(layer => ({
      ...layer,
      styleProperties: {
        ...layer.styleProperties,
        opacity: layerOpacity.get(layer.id) || layer.styleProperties?.opacity || 1
      }
    }));
    
    onApplyToCanvas(updatedLayers, visibleLayers);
    toast.success('PSD layers applied to canvas!');
  }, [layers, visibleLayers, layerOpacity, onApplyToCanvas]);

  const handleQuickGenerate = useCallback(() => {
    if (selectedFrame) {
      onGenerateCard({
        ...selectedFrame,
        appliedLayers: Array.from(visibleLayers),
        layerSettings: Object.fromEntries(layerOpacity)
      });
    } else {
      // Generate with current layer setup
      onGenerateCard({
        name: 'Custom PSD Layout',
        appliedLayers: Array.from(visibleLayers),
        layerSettings: Object.fromEntries(layerOpacity),
        autoGenerated: false
      });
    }
    toast.success('Card generated from PSD!');
  }, [selectedFrame, visibleLayers, layerOpacity, onGenerateCard]);

  return (
    <div className="space-y-4">
      {/* Main Preview Area */}
      <Card className="bg-crd-mediumGray/20 border-crd-mediumGray/30">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-crd-white text-sm flex items-center gap-2">
              <Eye className="w-4 h-4" />
              Live Preview
            </CardTitle>
            <div className="flex gap-2">
              <CRDButton
                variant="outline"
                size="sm"
                onClick={handleApplyToCanvas}
                className="flex items-center gap-2"
              >
                <ArrowRight className="w-3 h-3" />
                Apply to Canvas
              </CRDButton>
              <CRDButton
                variant="default"
                size="sm"
                onClick={handleQuickGenerate}
                className="flex items-center gap-2 bg-crd-blue hover:bg-crd-blue/80"
              >
                <Sparkles className="w-3 h-3" />
                Generate Card
              </CRDButton>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
            {/* Canvas Preview */}
            <div className="lg:col-span-2">
              <PSDCanvasRenderer
                layers={layers}
                visibleLayers={visibleLayers}
                selectedLayer={selectedLayer}
                onLayerSelect={setSelectedLayer}
                className="w-full aspect-[5/7]"
              />
              
              {/* Quick stats */}
              <div className="mt-2 flex items-center gap-4 text-xs text-crd-lightGray">
                <span>{layers.length} layers</span>
                <span>{visibleLayers.size} visible</span>
                {selectedLayer && <span>1 selected</span>}
              </div>
            </div>

            {/* Layer Controls */}
            <div className="lg:col-span-1">
              <PSDLayerPanel
                layers={layers}
                visibleLayers={visibleLayers}
                selectedLayer={selectedLayer}
                layerOpacity={layerOpacity}
                onLayerVisibilityToggle={handleLayerVisibilityToggle}
                onLayerSelect={setSelectedLayer}
                onLayerOpacityChange={handleLayerOpacityChange}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Frame Options */}
      {generatedFrames.length > 0 && (
        <Card className="bg-crd-mediumGray/20 border-crd-mediumGray/30">
          <CardHeader className="pb-3">
            <CardTitle className="text-crd-white text-sm flex items-center gap-2">
              <Wand2 className="w-4 h-4" />
              Smart Frame Suggestions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {generatedFrames.map((frame) => (
                <div
                  key={frame.id}
                  className={`p-3 rounded-lg border cursor-pointer transition-all ${
                    selectedFrame?.id === frame.id
                      ? 'border-crd-blue bg-crd-blue/10 shadow-lg'
                      : 'border-crd-mediumGray/30 hover:border-crd-blue/50 hover:bg-crd-mediumGray/10'
                  }`}
                  onClick={() => setSelectedFrame(frame)}
                >
                  <div className="flex items-start justify-between mb-2">
                    <div>
                      <h4 className="text-crd-white text-sm font-medium">
                        {frame.name}
                      </h4>
                      <p className="text-crd-lightGray text-xs">
                        {Object.keys(frame.layerMapping).length} layers mapped
                      </p>
                    </div>
                    
                    {frame.autoGenerated && (
                      <Badge variant="outline" className="text-xs border-crd-blue/50 text-crd-blue">
                        <Wand2 className="w-3 h-3 mr-1" />
                        Auto
                      </Badge>
                    )}
                  </div>
                  
                  <div className="flex gap-2">
                    <CRDButton
                      variant="outline"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        onUseFrame(frame);
                      }}
                      className="flex-1 text-xs"
                    >
                      <Play className="w-3 h-3 mr-1" />
                      Use
                    </CRDButton>
                    
                    <CRDButton
                      variant="default"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        onGenerateCard(frame);
                      }}
                      className="flex-1 text-xs bg-crd-blue hover:bg-crd-blue/80"
                    >
                      <Download className="w-3 h-3 mr-1" />
                      Generate
                    </CRDButton>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};